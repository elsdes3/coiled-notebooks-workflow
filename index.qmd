# Using Coiled to Run Jupyter Notebooks

## Pre-Requisites

### AWS

1. Using the [AWS Management Console](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/learn-whats-new.html), create an AWS Administrator IAM user with secret access keys for programmatic management of AWS resources. Instructions to do this are available from 05:20 - 09:35 of [this walkthrough](https://youtu.be/FRQ9fE4fd5g?si=yI0D4F_FhVTVmgQn&t=320).
2. Download access keys for this IAM user and store them in `~/.aws/credentials` under the `default` profile, as [explained in the `boto3` documentation](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#shared-credentials-file).
3. Ensure that `~/.aws/config` does not exist.

### Mutagen

Install and Configure [Mutagen](https://mutagen.io/documentation/introduction) using the [official installation documentation](https://mutagen.io/documentation/introduction/installation#other-platforms)

1. download `.tar.gz` file to `${HOME}`
2. extract into `${HOME}`
3. add extracted [contents to system path](https://askubuntu.com/a/60219/389946)
   - run
     ```bash
     nano ~/.bashrc
     ```
   - append the following to the end of the file
     ```bash
     export PATH=$PATH:/home/<user-name>/mutagen_linux_amd64_vX.XX.X
     ```
   - save the file using <kbd>Ctrl</kbd> + <kbd>C</kbd>
   - enter `Y` to save changes
   - source the modified `.bashrc` file using
     ```bash
     source ~/.bashrc
     ```

### Coiled

1. [Create a Coiled account](https://docs.coiled.io/user_guide/setup/index.html#sign-up)
2. [Manually create a Coiled API token](https://docs.coiled.io/user_guide/setup/tokens.html)
3. Export the Coiled account name and Coiled API token to the environment variables `COILED_ACCOUNT_NAME` and `COILED_TOKEN` respectively
   ```bash
   export COILED_ACCOUNT_NAME=<coiled-account-name>
   export COILED_TOKEN=<coiled-token>
   ```

## Usage

### Setup

1. Clone this repo
   ```bash
   git clone https://github.com/elsdes3/coiled-notebooks-workflow.git
   ```
2. Change into the root directory
   ```bash
   cd coiled-notebooks-workflow
   ```
3. Log in to Coiled using

   ```bash
   coiled login \
       --token {env:COILED_TOKEN} \
       --account {env:COILED_ACCOUNT_NAME} \
       --no-browser
   ```
   or
   ```bash
   make coiled-login
   ```
   which will create an entry in `~/.config/dask/coiled.yaml`.
4. Perform the following administrative tasks

   - AWS
     - create an IAM role *coiled-COILED_ACCOUNT_NAME*
     - create an the following IAM policies
       - *CoiledInstancePolicy*
       - [Coiled IAM ongoing and setup policies](https://docs.coiled.io/user_guide/setup/aws/manual.html#create-iam-policies)
     - create an non-admin IAM user
     - attach IAM policies to the newly created IAM role
       - *CoiledInstancePolicy*
       - `AmazonS3FullAccess`
     - attach policies to the newly created IAM user
       - Coiled setup policy
       - Coiled ongoing policy
     - create private S3 bucket named `oss-shared-scratchp`
   - Coiled
     - Configure Coiled to use AWS Cloud with the IAM User created in the step above
     - Create Coiled software environment

   using

   ```bash
   make create
   ```

### Create Notebook

1. Start a Coiled Jupyter notebook from the `code` directory (the folder to be synced to the cloud notebook)

   ```bash
   cd code && coiled notebook start --sync --region us-east-2 \
       --account {env:COILED_ACCOUNT_NAME} \
       --name coilednb \
       --software <coiled-software-environment-name> \
       --vm-type t3.xlarge
   ```

   or

   ```bash
   make coiled-nb
   ```

   If the contents of `code/` are to be synced to the Coiled notebook, then run `cd code/` before running the `coiled notebook start` command. This is shown in step 5. above. In `make coiled-nb`, this is done by `tox.ini` using the `changedir` directive.
2. The browser launches the Jupyterlab interface and the contents of the synced folder (`code`) are visible.
3. Run the notebook `01-get-data/coiled_notebooks_demo.ipynb`

   - the cell to list bucket contents should
     - run with no errors since the AWS user has *AmazonS3FullAccess* privileges
     - produce the following output

       ```python
       > s3_client.list_buckets()['Buckets']
       [
           {
               'Name': 'oss-shared-scratchp',
               'CreationDate': <creation-datetime(s)-here>
           },
           {
               'Name': <additional-bucket(s)-here>,
               'CreationDate': <creation-datetime(s)-here>,
           },
       ]
       ```

### Teardown

1. Delete all AWS and Coiled resources that were created by the administrative tasks step earlier using

   ```bash
   make delete
   ```
